<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>phpunit on Marc Guyer</title><link>//marc.guyer.me/tags/phpunit/</link><description>Recent content in phpunit on Marc Guyer</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>/contact (Marc Guyer)</managingEditor><webMaster>/contact (Marc Guyer)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 15 Sep 2021 16:25:49 -0500</lastBuildDate><atom:link href="//marc.guyer.me/tags/phpunit/index.xml" rel="self" type="application/rss+xml"/><item><title>Mezzio Example: Doctrine Entities and Repositories</title><link>//marc.guyer.me/posts/mezzio-example/doctrine-entities-and-repositories/</link><pubDate>Wed, 15 Sep 2021 16:25:49 -0500</pubDate><author>/contact (Marc Guyer)</author><guid>//marc.guyer.me/posts/mezzio-example/doctrine-entities-and-repositories/</guid><description>Overview This post brings several pieces of supporting libraries together.
Entities to Support OAuth2 Requirements We&amp;rsquo;ll start by defining a minimum domain model via PHP8 Attributes and Doctrine&amp;rsquo;s new attribute mapping driver. In the short-term, we only need to model what&amp;rsquo;s necessary for our application&amp;rsquo;s authentication layer using OAuth2. For now, we&amp;rsquo;re creating a minimal set of objects to comply with the needs of our supporting libraries' interfaces. We need a minimum of 6 entities and their corresponding repositories:</description></item><item><title>Mezzio Example: Functional and Unit Testing</title><link>//marc.guyer.me/posts/mezzio-example/functional-and-unit-testing/</link><pubDate>Sun, 01 Dec 2019 14:28:49 -0500</pubDate><author>/contact (Marc Guyer)</author><guid>//marc.guyer.me/posts/mezzio-example/functional-and-unit-testing/</guid><description>Where do we start? It&amp;rsquo;s a good choice to start any application with a solid structure for testing the application with automated testing tools. That&amp;rsquo;s why the first post in this series is about testing. Any well-tested application will typically have more lines of testing code than actual application code. Starting with a good structure for testing will pay dividends down the road.
In this post, I&amp;rsquo;ll show a basic setup for testing Mezzio applications.</description></item><item><title>Mezzio Example: Introduction</title><link>//marc.guyer.me/posts/mezzio-example/introduction/</link><pubDate>Mon, 04 Nov 2019 15:08:36 -0400</pubDate><author>/contact (Marc Guyer)</author><guid>//marc.guyer.me/posts/mezzio-example/introduction/</guid><description>What is this? Let&amp;rsquo;s create a REST API with Mezzio. In this series, you&amp;rsquo;ll learn how to create a REST API from the ground up. We&amp;rsquo;ll use Mezzio as the base framework, Doctrine for the data layer, OAuth2 for authentication and authorization, PHPUnit for automated testing, and several other libraries along the way.
Source Code I&amp;rsquo;ve created a new bare-bones application starting with the Mezzio Skeleton Application where all the code shown in this series lives.</description></item></channel></rss>