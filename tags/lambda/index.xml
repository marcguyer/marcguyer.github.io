<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda on Marc Guyer</title><link>//marc.guyer.me/tags/lambda/</link><description>Recent content in Lambda on Marc Guyer</description><generator>Hugo</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 15 May 2025 21:16:19 -0400</lastBuildDate><atom:link href="//marc.guyer.me/tags/lambda/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Multi-Architecture AWS Lambda Functions with Bref PHP and PostgreSQL</title><link>//marc.guyer.me/posts/bref-php-pdo-postgresql-multi-architecture-example/</link><pubDate>Wed, 15 May 2024 12:00:00 -0400</pubDate><guid>//marc.guyer.me/posts/bref-php-pdo-postgresql-multi-architecture-example/</guid><description>&lt;h2 id="the-multi-architecture-challenge">The Multi-Architecture Challenge&lt;/h2>
&lt;p>With the rise of Apple Silicon (ARM64) and the continued use of Intel-based (x86_64) systems, developers face increasing challenges in creating applications that work seamlessly across both architectures. This is especially true for PHP developers working with AWS Lambda, where subtle differences can lead to frustrating issues.&lt;/p>
&lt;p>In the PHP ecosystem, one particular pain point has been connecting to PostgreSQL databases from Lambda functions. The variations in how PDO PostgreSQL extension loading works across architectures has been a source of confusion for many developers.&lt;/p></description></item></channel></rss>