<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Apple-Silicon on Marc Guyer</title><link>//marc.guyer.me/tags/apple-silicon/</link><description>Recent content in Apple-Silicon on Marc Guyer</description><generator>Hugo</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 15 May 2025 21:52:45 -0400</lastBuildDate><atom:link href="//marc.guyer.me/tags/apple-silicon/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Multi-Architecture AWS Lambda Functions with Bref PHP and PostgreSQL</title><link>//marc.guyer.me/posts/bref-php-pdo-postgresql-multi-architecture-example/</link><pubDate>Wed, 15 May 2024 12:00:00 -0400</pubDate><guid>//marc.guyer.me/posts/bref-php-pdo-postgresql-multi-architecture-example/</guid><description>&lt;h2 id="the-multi-architecture-challenge">The Multi-Architecture Challenge&lt;/h2>
&lt;p>With the rise of Apple Silicon (ARM64) and the continued use of Intel-based (x86_64) systems, developers face increasing challenges in creating applications that work seamlessly across both architectures. This is especially true for PHP developers working with AWS Lambda, where subtle differences can lead to frustrating issues.&lt;/p>
&lt;h2 id="example-with-bref-php-runtime--pdo-postgresql-extension">Example with Bref PHP Runtime + PDO PostgreSQL Extension&lt;/h2>
&lt;p>To address these challenges, I&amp;rsquo;ve created a comprehensive example repository that demonstrates a working multi-architecture implementation of PHP Lambda functions using &lt;a href="https://bref.sh/">Bref&lt;/a> and PDO PostgreSQL. This example focuses on:&lt;/p></description></item></channel></rss>