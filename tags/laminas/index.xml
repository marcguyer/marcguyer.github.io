<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laminas on Marc Guyer</title><link>//marc.guyer.me/tags/laminas/</link><description>Recent content in Laminas on Marc Guyer</description><generator>Hugo</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 17 May 2025 09:20:53 -0400</lastBuildDate><atom:link href="//marc.guyer.me/tags/laminas/index.xml" rel="self" type="application/rss+xml"/><item><title>Mezzio Example: Testing Doctrine Entities and Repositories</title><link>//marc.guyer.me/posts/mezzio-example/testing-doctrine-entities-and-repositories/</link><pubDate>Thu, 16 Sep 2021 16:25:49 -0500</pubDate><guid>//marc.guyer.me/posts/mezzio-example/testing-doctrine-entities-and-repositories/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>In this post, we&amp;rsquo;ll see how to create a comprehensive testing framework for Doctrine Entities and Repositories. This is a continuation of our &lt;a href="//marc.guyer.me/posts/mezzio-example/doctrine-entities-and-repositories/">Mezzio Example series&lt;/a> where we previously created our domain model for an OAuth2-enabled application.&lt;/p>
&lt;p>Let&amp;rsquo;s make sure our Entities and Repositories have full test coverage. The domain model is a significant part of any dynamic application so the code should be in good shape. We don&amp;rsquo;t want any bugs here.&lt;/p></description></item><item><title>Mezzio Example: Doctrine Entities and Repositories</title><link>//marc.guyer.me/posts/mezzio-example/doctrine-entities-and-repositories/</link><pubDate>Wed, 15 Sep 2021 16:25:49 -0500</pubDate><guid>//marc.guyer.me/posts/mezzio-example/doctrine-entities-and-repositories/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>This post brings several pieces of supporting libraries together.&lt;/p>
&lt;h3 id="entities-to-support-oauth2-requirements">Entities to Support OAuth2 Requirements&lt;/h3>
&lt;p>We&amp;rsquo;ll start by defining a minimum domain model via PHP8 Attributes and Doctrine&amp;rsquo;s new attribute mapping driver. In the short-term, we only need to model what&amp;rsquo;s necessary for our application&amp;rsquo;s authentication layer using OAuth2. For now, we&amp;rsquo;re creating a minimal set of objects to comply with the needs of our supporting libraries&amp;rsquo; interfaces. We need a minimum of 6 entities and their corresponding repositories:&lt;/p></description></item><item><title>Mezzio Example: Psalm Introduction</title><link>//marc.guyer.me/posts/mezzio-example/psalm-introduction/</link><pubDate>Wed, 15 Sep 2021 14:28:49 -0500</pubDate><guid>//marc.guyer.me/posts/mezzio-example/psalm-introduction/</guid><description>&lt;h2 id="what-is-psalm">What is Psalm?&lt;/h2>
&lt;p>&lt;a href="https://psalm.dev">Psalm&lt;/a> is a static analysis tool for PHP that helps you identify problems with your code. If you use it, you&amp;rsquo;ll become a better coder. I promise.&lt;/p>
&lt;h3 id="learn-more-about-psalm">Learn more about Psalm&lt;/h3>
&lt;p>Here&amp;rsquo;s a great read &amp;ndash; the story of the origins of Psalm at Vimeo and the value it provided the team.&lt;/p>
&lt;p>&lt;a href="https://psalm.dev/articles/fixing-code-that-aint-broken">https://psalm.dev/articles/fixing-code-that-aint-broken&lt;/a>&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll show a basic setup for static analysis with Psalm in Mezzio applications.&lt;/p></description></item><item><title>Mezzio Example: Functional and Unit Testing</title><link>//marc.guyer.me/posts/mezzio-example/functional-and-unit-testing/</link><pubDate>Sun, 01 Dec 2019 14:28:49 -0500</pubDate><guid>//marc.guyer.me/posts/mezzio-example/functional-and-unit-testing/</guid><description>&lt;h2 id="where-do-we-start">Where do we start?&lt;/h2>
&lt;p>It&amp;rsquo;s a good choice to start any application with a solid structure for testing the application with automated testing tools. That&amp;rsquo;s why the first post in this series is about testing. Any well-tested application will typically have more lines of testing code than actual application code. Starting with a good structure for testing will pay dividends down the road.&lt;/p>
&lt;p>In this post, I&amp;rsquo;ll show a basic setup for testing Mezzio applications. We&amp;rsquo;ll get to some more advanced testing topics in later posts.&lt;/p></description></item><item><title>Mezzio Example: Introduction</title><link>//marc.guyer.me/posts/mezzio-example/introduction/</link><pubDate>Mon, 04 Nov 2019 15:08:36 -0400</pubDate><guid>//marc.guyer.me/posts/mezzio-example/introduction/</guid><description>&lt;h2 id="what-is-this">What is this?&lt;/h2>
&lt;p>Let&amp;rsquo;s create a REST API with &lt;a href="https://docs.mezzio.dev/">Mezzio&lt;/a>. In this series, you&amp;rsquo;ll learn how to create a REST API from the ground up. We&amp;rsquo;ll use Mezzio as the base framework, Doctrine for the data layer, OAuth2 for authentication and authorization, PHPUnit for automated testing, and several other libraries along the way.&lt;/p>
&lt;h2 id="source-code">Source Code&lt;/h2>
&lt;p>I&amp;rsquo;ve created a new bare-bones application starting with the &lt;a href="https://github.com/mezzio/mezzio-skeleton">Mezzio Skeleton Application&lt;/a> where all the code shown in this series lives. You can install it in your local environment and hack on it all you want. You&amp;rsquo;re also welcome to contribute to the example application via PR. Check it out here:&lt;/p></description></item></channel></rss>