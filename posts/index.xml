<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Marc Guyer</title>
    <link>//marc.guyer.me/posts/</link>
    <description>Recent content in Posts on Marc Guyer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>/contact (Marc Guyer)</managingEditor>
    <webMaster>/contact (Marc Guyer)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 01 Dec 2019 14:28:49 -0500</lastBuildDate>
    
	<atom:link href="//marc.guyer.me/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mezzio Example: Functional Testing</title>
      <link>//marc.guyer.me/posts/mezzio-example/functional-testing/</link>
      <pubDate>Sun, 01 Dec 2019 14:28:49 -0500</pubDate>
      <author>/contact (Marc Guyer)</author>
      <guid>//marc.guyer.me/posts/mezzio-example/functional-testing/</guid>
      <description>Where do we start? It&#39;s a good choice to start any application with a solid structure for testing the application with automated testing tools. That&#39;s why the first post in this series is about testing. Any well-tested application will typically have more lines of testing code than actual application code. Starting with a good structure for testing will pay dividends down the road.
In this post, I&#39;ll show a basic setup for testing Mezzio applications.</description>
    </item>
    
    <item>
      <title>Mezzio Example: Introduction</title>
      <link>//marc.guyer.me/posts/mezzio-example/introduction/</link>
      <pubDate>Mon, 04 Nov 2019 15:08:36 -0400</pubDate>
      <author>/contact (Marc Guyer)</author>
      <guid>//marc.guyer.me/posts/mezzio-example/introduction/</guid>
      <description>What is this? Let&#39;s create a REST API with Mezzio. In this series, you&#39;ll learn how to create a REST API from the ground up. We&#39;ll use Mezzio as the base framework, Doctrine for the data layer, OAuth2 for authentication and authorization, PHPUnit for automated testing, and several other libraries along the way.
Source Code I&#39;ve created a new bare-bones application starting with the Mezzio Skeleton Application where all the code shown in this series lives.</description>
    </item>
    
    <item>
      <title>Example Recovery Procedure for MySQL Backup Made with Xtrabackup</title>
      <link>//marc.guyer.me/posts/example-recovery-procedure-for-mysql-backup-made-with-xtrabackup/</link>
      <pubDate>Tue, 24 Sep 2019 17:09:56 -0400</pubDate>
      <author>/contact (Marc Guyer)</author>
      <guid>//marc.guyer.me/posts/example-recovery-procedure-for-mysql-backup-made-with-xtrabackup/</guid>
      <description>We have a pre-existing procedure for backing up a MySQL database using hot backups with the wonderful Percona Xtrabackup and in this case the deprecated innobackupex binary.
Xtrabackup is nice since it creates a clean backup of InnoDB, XtraDB, and MyISAM tables quickly and without locking. There are countless useful features including point-in-time recovery, incremental backups, single table recovery, single partition recovery, I/O throttling, parallel processing, encryption, compression, streaming, and more.</description>
    </item>
    
  </channel>
</rss>